unit main;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, FileCtrl, StrUtils,OlegFunction;

type
  TMainForm = class(TForm)
    BtFileSelect: TButton;
    BtDone: TButton;
    LFile: TLabel;
    LAction: TLabel;
    OpenDialog1: TOpenDialog;
    BtClose: TButton;
    procedure BtFileSelectClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure BtCloseClick(Sender: TObject);
    procedure BtDoneClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;
  Directory,FileName:string;
  SCAPSFile:TStringList;

implementation

{$R *.dfm}


procedure TMainForm.BtCloseClick(Sender: TObject);
begin
 MainForm.Close;
end;

procedure TMainForm.BtDoneClick(Sender: TObject);
 var Row:Int64;
     Task,FileNumber:word;
     Comments,SCparam,DatFile:TStringList;
     IlluminatedChar:boolean;
     T,V,I:double;
     tempStr,DatFileName,DatFileLocation:string;
begin
 if LFile.Font.Color<>clBlue then Exit;

 if not(SetCurrentDir(Directory)) then
   begin
    MessageDlg('Current directory is not exist', mtError,[mbOk],0);
    Exit;
   end;
 DatFileLocation:=AnsiReplaceStr (FileName, '.', '_');
 try
  MkDir(DatFileLocation);
 except

 end;
 DatFileLocation:=Directory+'\'+DatFileLocation+'\';


 DecimalSeparator:='.';
 Comments:=TStringList.Create;
 SCparam:=TStringList.Create;
 DatFile:=TStringList.Create;

 Row:=0;
 Task:=0;
 FileNumber:=0;
 T:=300;
 IlluminatedChar:=False;

 repeat

  if AnsiStartsStr ('SCAPS', SCAPSFile[ROW]) then
   begin
     Task:=1;
     Inc(FileNumber);
     Inc(Row);
     Continue;
   end;


  if  ((Task=3)and
     (AnsiContainsStr(SCAPSFile[ROW],'v(V)'))and
     (AnsiContainsStr(SCAPSFile[ROW],'jtot(mA/cm2)'))) then
   begin
//     showmessage(inttostr(FileNumber));
     ROW:=ROW+2;
     DatFile.Clear;
     V:=0;
     I:=0;
//     showmessage(SCAPSFile[ROW]);
     while SCAPSFile[ROW]<>'' do
       begin
        tempStr:=SCAPSFile[ROW];
//     showmessage(SCAPSFile[ROW]);
        tempStr:=TwoSpaceToOne(tempStr);
//     showmessage(tempStr);
        if AnsiPos (' ', tempStr)=1 then
             Delete(tempStr, 1, 1);
     showmessage(tempStr);
//     showmessage(Copy(tempStr, 1, AnsiPos (' ', tempStr)-1));
        try
         V:=StrToFloat(Copy(tempStr, 1, AnsiPos (' ', tempStr)-1));
         Delete(tempStr, 1, AnsiPos (' ', tempStr));
//     showmessage(Copy(tempStr, 1, AnsiPos (' ', tempStr)-1));

         I:=10*StrToFloat(Copy(tempStr, 1, AnsiPos (' ', tempStr)-1));
     showmessage(floattostr(V)+' '+floattostr(I));

        except
        DatFile.Add((FloatToStrF(V,ffExponent,4,0)+' '+
                     FloatToStrF(I,ffExponent,4,0)));
        end;
        Row:=ROW+1;
       end;

     DatFileName:=IntToStr(FileNumber)+'_'+IntToStr(Round(T))+'.dat';
     if FileNumber<10 then DatFileName:='0'+DatFileName;
     if IlluminatedChar then  DatFileName:='L'+DatFileName
                        else  DatFileName:='T'+DatFileName;
     DatFile.SaveToFile(DatFileLocation+DatFileName);
     Comments.Add(DatFileName);
     Comments.Add('T='+FloatToStrF(T,ffGeneral,4,1));
     Comments.Add('');
     Task:=4;
     Continue;
   end;

  if  (Task=2)and
     (AnsiStartsStr ('Temperature', SCAPSFile[ROW])) then
   begin
//        showmessage(inttostr(FileNumber));
     tempStr:=SCAPSFile[ROW];
     tempStr:=TwoSpaceToOne(tempStr);

     Delete(tempStr, 1, AnsiPos (' ', tempStr));
     try
       T:=StrToFloat(Copy(tempStr, 1, AnsiPos (' ', tempStr)-1));
       Task:=3;
     except

     end;
//        showmessage(inttostr(FileNumber)+' '+inttostr(Task));
     Inc(Row);
     Continue;
   end;

  if  (Task=1)and
     (AnsiContainsStr (SCAPSFile[ROW],'in dark')or
      AnsiContainsStr (SCAPSFile[ROW],'under illumination')) then
   begin
     Task:=2;
     IlluminatedChar:=AnsiContainsStr (SCAPSFile[ROW],'under illumination');
     Inc(Row);
     Continue;
   end;


  Inc(Row);
 until (Row>=SCAPSFile.Count);
// showmessage(inttostr(FileNumber));

//    repeat
//     ShotName:=AnsiUpperCase(SR.name);
//     Read_File(SR.name,Vax);
//     ShotName:=copy(ShotName,1,length(ShotName)-4);
//     //в ShotName коротке ім'z файла - те що вводиться при вимірах :)
//     Inform.Add(ShotName);
//     Inform.Add('T='+FloatToStrF(Vax^.T,ffGeneral,4,1));
//
//     if Vax^.T=0 then T_bool:=True;
//     {встановлюється змінна, яка показує що є файли з невизначеною температурою}
//
//
//     for DR := Low(DR) to High(DR) do
//        if (DR in DirNames) then
//      begin
//      case DR of
//       ForwRs:
//        ForwardIVwithRs(Vax,tempVax,RsDefineCB(Vax,ComBForwRs,ComBForwRs_n));
//{---------------------------------------------}
//       Cheung:
//        ChungFun(Vax,tempVax);
//{---------------------------------------------}
//       Hfunct:
//        HFun(Vax,tempVax,Diod,nDefineCB(Vax,CombHfuncN,CombHfuncN_Rs));
//{---------------------------------------------}
//       Norde:
//         NordeFun(Vax,tempVax,Diod,GraphParameters.Gamma);
//{---------------------------------------------}
//       Ideal:
//         N_V_Fun(Vax,tempVax,RsDefineCB(Vax,ComBNRs,ComBNRs_n));
//{---------------------------------------------}
//       Nss:
//         begin
//        Nss_Fun(Vax,tempVax,
//               FbDefineCB(Vax,ComboBNssFb,RsDefineCB(Vax,ComBNssRs,ComBNssRs_n)),
//               RsDefineCB(Vax,ComBNssRs,ComBNssRs_n),
//               Diod,D[diNss],RadButNssNvD.Checked);
//          Sorting(tempVax)
//         end;
//{---------------------------------------------}
//       Reverse:
//        ReverseIV(Vax,tempVax);
//{---------------------------------------------}
//       Kamin1:
//         Kam1_Fun(Vax,tempVax,D[diKam1]);
//{---------------------------------------------}
//       Kamin2:
//         Kam2_Fun(Vax,tempVax,D[diKam2]);
//{---------------------------------------------}
//       Gromov1:
//         Gr1_Fun(Vax,tempVax);
//{---------------------------------------------}
//       Gromov2:
//         Gr2_Fun(Vax,tempVax,Diod);
//{---------------------------------------------}
//       Cibil:
//         CibilsFun(Vax,D[diCib],tempVax);
//{---------------------------------------------}
//       Lee:
//         LeeFun(Vax,D[diLee],tempVax);
//{---------------------------------------------}
//       Werner:
//         WernerFun(Vax,tempVax);
//{---------------------------------------------}
//       MAlpha:
//         MikhAlpha_Fun(Vax,tempVax);
//{---------------------------------------------}
//       MBetta:
//         MikhBetta_Fun(Vax,tempVax);
//{---------------------------------------------}
//       MIdeal:
//         MikhN_Fun(Vax,tempVax);
//{---------------------------------------------}
//       MRserial:
//         MikhRs_Fun(Vax,tempVax);
//{---------------------------------------------}
//       Dit:
//         Dit_Fun(Vax,tempVax,
//                 RsDefineCB(Vax,ComBDitRs,ComBDitRs_n),
//                 Diod,D[diIvan]);
//{---------------------------------------------}
//      Exp2F:
//        Forward2Exp(Vax,tempVax,RsDefineCB(Vax,ComBExp2FRs,ComBExp2FRs_n));
//{---------------------------------------------}
//      Exp2R:
//        Reverse2Exp(Vax,tempVax,RsDefineCB(Vax,ComBExp2RRs,ComBExp2RRs_n));
//{---------------------------------------------}
//       M_V:
//         M_V_Fun(Vax,tempVax,CBM_Vdod.Checked,fnPowerIndex);
//{---------------------------------------------}
//       Fow_Nor:
//         M_V_Fun(Vax,tempVax,CBFow_Nordod.Checked,fnFowlerNordheim);
//{---------------------------------------------}
//       Fow_NorE:
//         M_V_Fun(Vax,tempVax,CBFow_NorEdod.Checked,fnFowlerNordheimEm);
//{---------------------------------------------}
//       Abeles:
//         M_V_Fun(Vax,tempVax,CBAbelesdod.Checked,fnAbeles);
//{---------------------------------------------}
//       AbelesE:
//         M_V_Fun(Vax,tempVax,CBAbelesEdod.Checked,fnAbelesEm);
//{---------------------------------------------}
//       Fr_Pool:
//         M_V_Fun(Vax,tempVax,CBFr_Pooldod.Checked,fnFrenkelPool);
//{---------------------------------------------}
//       Fr_PoolE:
//         M_V_Fun(Vax,tempVax,CBFr_PoolEdod.Checked,fnFrenkelPoolEm);
//     end; //case
//       Write_File(CurDirectory+'\'+
//         GetEnumName(TypeInfo(TDirName),ord(DR))+'\'+ShotName+
//         GetEnumName(TypeInfo(Tfile_end),ord(DR))+'.dat',tempVax);
//       end;
//
//    until FindNext(SR) <> 0;
//
//    for DR := Low(DR) to High(DR) do
//      if (DR in DirNames) then
//       begin
//        AssignFile(f,CurDirectory+'\'+
//        GetEnumName(TypeInfo(TDirName),ord(DR))+'\'+'comments');
//        Rewrite(f);
//        for j := 0 to Inform.Count-1 do
//         if Odd(j) then
//             begin
//             writeln(f,Inform[j]);
//             writeln(f);
//             end
//                   else
//    writeln(f,Inform[j]+
//            GetEnumName(TypeInfo(Tfile_end),ord(DR))+'.dat');
//        CloseFile(f);
//       end;
//    dispose(Vax);
//    dispose(tempVax);
//    Inform.Free;
//    FindClose(SR);
//    MessageDlg('Directory with files were created sucsesfully', mtInformation,[mbOk],0);
//    if T_bool then MessageDlg('Some file can be absent because temperuture is undefined', mtInformation,[mbOk],0);
//  end
//                                     else
//          MessageDlg('No *.dat file in current directory', mtError,[mbOk],0);



 if Comments.Count>0 then
      Comments.SaveToFile(DatFileLocation+'comments');
 Comments.Free;
 SCparam.Free;
 DatFile.Free;

 LAction.Caption:='Extraction is done';
 LAction.Font.Color:=clGreen;
end;

procedure TMainForm.BtFileSelectClick(Sender: TObject);

begin
   if OpenDialog1.Execute()
     then
       begin
       Directory:=ExtractFilePath(OpenDialog1.FileName);
       FileName:=ExtractFileName(OpenDialog1.FileName);
       FileName:=copy(FileName,1,length(FileName)-3);
       LFile.Caption:=FileName;
       LFile.Font.Color:=clblue;
       BtDone.Enabled:=True;
       LAction.Caption:='Not Yet';
       LAction.Font.Color:=clBlack;
       if FileExists(OpenDialog1.FileName) then
         begin
         SCAPSFile.Clear;
         SCAPSFile.LoadFromFile(OpenDialog1.FileName);
         end;
       end;
end;


procedure TMainForm.FormCreate(Sender: TObject);
begin
  SCAPSFile:=TStringList.Create;
  SCAPSFile.Sorted:=False;
end;

procedure TMainForm.FormDestroy(Sender: TObject);
begin
  SCAPSFile.Free;
end;

end.
