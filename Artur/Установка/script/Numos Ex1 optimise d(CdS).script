// SCAPS script
action workingpoint.voltage 0
action qe.checkaction 1
action iv.checkaction 0
action cv.checkaction 0
action cf.checkaction 0
action light // the NUMOS "measurement" was in dark, but the calculation in light is so much faster :-) 

get measurement.qe zu // this sets also zname and uname
set scriptvariable.xname d(CdS) (µm)
set scriptvariable.yname Chi_sq
//set scriptvariable.xindex 1
//show scriptvariables 

// three initial guesses for the parameter d(CdS)
set scriptvariable.maxiteration 3
set scriptvariable.nx maxiteration
set scriptvariable.ny maxiteration
get layer2.thickness zvalue
set scriptvariable.xvector[1] zvalue
//show scriptvariables 
set scriptvariable.xvalue 2.0
set scriptvariable.yvalue xindex
math scalarreciproque yy 
//show scriptvariables 
math scalarpower xxy // xvalue <- (2)^(1/xindex )
// thus stay closer to x as iteration proceeds
math scalarmultiply yzx
//show scriptvariables 
set scriptvariable.xvector[2] yvalue
math scalardivide yzx
// show scriptvariables 
set scriptvariable.xvector[0] yvalue
// show scriptvariables 

loop start 
set layer2.thickness xvector[loopcounter] // set the CdS thicknesses from the 3 first elements of xvector
// show scriptvariables 
calculate singleshot // calculate QE(dark)
get qe vw // place QE in vectors v and w
math chi_square yzuvw // calculate the Chi-square deviation between the measured and calculated QE
set scriptvariable.yvector[loopcounter] yvalue // and place it in yvector at it's place
// show scriptvariables 
loop stop 

set scriptvariable.mode 5         // means find a minimum (here a QE curve fit), the variable (here d) is of "linear nature"
loop maxiteration 8                // do not exagerate
loop maxerror     1e-4                // do not exagerate;

loop start                             // start the iteration to find the root

// use the dll dellivered with SCAPS

rundll scapsuserfunction               

// it looks only to xvector and yvector [0], [1] and [2] to find a better guess to make y = maximal
// the function returns xvalue as a better guess for the variable; it is placed in yvalue
// set this to d
// then place this better guess on xvector[0] (and push the rest upward)               

set layer2.thickness xvalue // use the proposed new value as d(CdS)
set scriptvariable.xvector xvalue      

calculate singleshot 

// places the new Chi_sq in yvector[0] and pushes the rest up
get qe vw // place QE in vectors v and w
math chi_square yzuvw // calculate the Chi-square deviation between the measured and calculated QE
set scriptvariable.yvector yvalue
set scriptvariable.looperror yvalue

// you can comment the show command below out when it runs to your satisfaction       
//  show scriptvariables                   

loop stop
set scriptvariable.zindex loopcounter
math increment zindex
//show scriptvariables




